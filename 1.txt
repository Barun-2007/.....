# fruits = ["apple", "banana", "cherry"]

# for index, value in enumerate(fruits):
#     print(index, value)

# clear() → Remove all items from the dictionary.

# copy() → Return a shallow copy.

# fromkeys(iterable, value=None) → Create a new dict with keys from iterable and given value.

# get(key, default=None) → Return value for key, or default if key not found.

# items() → Return a view object of (key, value) pairs.

# keys() → Return a view object of dictionary keys.

# pop(key[, default]) → Remove specified key and return the value (or default).

# popitem() → Remove and return a (key, value) pair (LIFO order in Python 3.7+).

# setdefault(key, default=None) → Return value if key exists, else insert with default and return it.

# update([other]) → Update dictionary with key/value pairs from another mapping or iterable.

# values() → Return a view object of dictionary values.

# len(dict) → number of items

# sorted(dict) → sorted list of keys

# dict() → create a dictionary

# len(tuple) → length

# max(tuple) → maximum element

# min(tuple) → minimum element

# sum(tuple) → sum of elements (if numeric)

# sorted(tuple) → return a sorted list of tuple’s items

# tuple(iterable) → create a tuple from iterable

# any(tuple) → True if any element is truthy

# all(tuple) → True if all elements are truthy

# count(x) → Return the number of times x appears in the tuple.

# index(x[, start[, end]]) → Return the index of the first occurrence of x (error if not found).

# len(str) → length of string

# ord(char) → Unicode code point of character

# chr(num) → character for Unicode code point

# str(obj) → convert to string

# capitalize() → Return a copy with first character capitalized, rest lower.

# casefold() → Return a casefolded copy (stronger lowercase, for comparisons).

# center(width, fillchar=' ') → Center string in a field of given width.

# count(sub[, start[, end]]) → Count occurrences of substring.

# encode(encoding='utf-8', errors='strict') → Return encoded version.

# endswith(suffix[, start[, end]]) → Check if string ends with suffix.

# expandtabs(tabsize=8) → Replace tabs with spaces.

# find(sub[, start[, end]]) → Return lowest index of substring, -1 if not found.

# format(*args, **kwargs) → Format string with placeholders.

# format_map(mapping) → Format using a mapping (like dict).

# index(sub[, start[, end]]) → Like find(), but raises error if not found.

# isalnum() → True if all characters are alphanumeric.

# isalpha() → True if all characters are alphabetic.

# isascii() → True if all characters are ASCII.

# isdecimal() → True if all characters are decimal digits.

# isdigit() → True if all characters are digits.

# isidentifier() → True if string is a valid Python identifier.

# islower() → True if all cased chars are lowercase.

# isnumeric() → True if all characters are numeric.

# isprintable() → True if all characters are printable.

# isspace() → True if all characters are whitespace.

# istitle() → True if string is titlecased.

# isupper() → True if all cased chars are uppercase.

# join(iterable) → Concatenate an iterable with separator = string.

# ljust(width, fillchar=' ') → Left-justify string.

# lower() → Return lowercase copy.

# lstrip([chars]) → Remove leading characters.

# maketrans(x, y=None, z=None) → Return a translation table (used with translate).

# partition(sep) → Split at first occurrence of sep into tuple (before, sep, after).

# removeprefix(prefix) → Remove prefix if present.

# removesuffix(suffix) → Remove suffix if present.

# replace(old, new[, count]) → Replace substring occurrences.

# rfind(sub[, start[, end]]) → Return highest index of substring, -1 if not found.

# rindex(sub[, start[, end]]) → Like rfind, but error if not found.

# rjust(width, fillchar=' ') → Right-justify string.

# rpartition(sep) → Split at last occurrence of sep.

# rsplit(sep=None, maxsplit=-1) → Split from the right.

# rstrip([chars]) → Remove trailing characters.

# split(sep=None, maxsplit=-1) → Split into list of substrings.

# splitlines(keepends=False) → Split at line breaks.

# startswith(prefix[, start[, end]]) → Check if string starts with prefix.

# strip([chars]) → Remove leading and trailing characters.

# swapcase() → Swap uppercase to lowercase and vice versa.

# title() → Title-case string.

# translate(table) → Translate characters via str.maketrans.

# upper() → Uppercase string.

# zfill(width) → Pad string on the left with zeros

# len(list) → length

# max(list) → maximum element

# min(list) → minimum element

# sum(list) → sum of elements

# sorted(list) → return a new sorted list

# list(iterable) → create a list from an iterable

# append(x) → Add an element x at the end.

# extend(iterable) → Add all elements of another iterable (list, tuple, set, etc.).

# insert(i, x) → Insert element x at index i.

# remove(x) → Remove the first occurrence of x.

# pop([i]) → Remove and return the element at index i (last element by default).

# clear() → Remove all elements.

# index(x[, start[, end]]) → Return the index of first occurrence of x.

# count(x) → Count how many times x appears.

# sort(key=None, reverse=False) → Sort the list in place.

# reverse() → Reverse the list in place.

# copy() → Return a shallow copy of the list.